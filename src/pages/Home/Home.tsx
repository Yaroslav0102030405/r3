import React, { useState } from 'react';

const products = [
  { id: 'apple', name: '–Ø–±–ª—É–∫–æ', price: 50, icon: 'üçé' },
  { id: 'banana', name: '–ë–∞–Ω–∞–Ω', price: 70, icon: 'üçå' },
  { id: 'orange', name: '–ê–ø–µ–ª—å—Å–∏–Ω', price: 60, icon: 'üçä' },
  { id: 'grape', name: '–í–∏–Ω–æ–≥—Ä–∞–¥', price: 120, icon: 'üçá' },
  { id: 'lemon', name: '–õ–∏–º–æ–Ω', price: 40, icon: 'üçã' },
];

interface PurchaseItem {
  id: string;
  name: string;
  icon: string;
  quantity: number;
  totalItemPrice: number;
  timestamp: string;
  unitPrice: number;
}

function Home() {
   const [initialBalanceInput, setInitialBalanceInput] = useState<string>('');
  const [balance, setBalance] = useState<number>(0); 
  const [purchaseCount, setPurchaseCount] = useState<number>(0);

  // –ó–ú–Ü–ù–ê: –°—Ç–∞–Ω –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤–∏–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.
  // –ö–ª—é—á: ID —Ç–æ–≤–∞—Ä—É (string), –ó–Ω–∞—á–µ–Ω–Ω—è: –ö—ñ–ª—å–∫—ñ—Å—Ç—å (number)
  const [selectedQuantities, setSelectedQuantities] = useState<Record<string, number>>({}); 

  // –û–ù–û–í–õ–ï–ù–ù–Ø: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –µ–ª–µ–º–µ–Ω—Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–∫—É–ø–æ–∫
  const [purchaseHistory, setPurchaseHistory] = useState<
    { id: string; name: string; icon: string; quantity: number; totalItemPrice: number; timestamp: string }[]
  >([]);

  const parsedInitialBalance: number = parseFloat(initialBalanceInput);

  // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –≤–∏–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
  const calculateTotalSelectedPrice = (): number => {
    let total = 0;
    // –ü–µ—Ä–µ–±–∏—Ä–∞—î–º–æ –æ–±'—î–∫—Ç selectedQuantities
    for (const productId in selectedQuantities) {
      const quantity = selectedQuantities[productId];
      const product = products.find(p => p.id === productId);
      // –î–æ–¥–∞—î–º–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏: —Ü—ñ–Ω–∞ —Ç–æ–≤–∞—Ä—É * –π–æ–≥–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
      if (product && quantity > 0) { 
        total += product.price * quantity;
      }
    }
    return total;
  };

  const paymentAmount: number = calculateTotalSelectedPrice();

  // --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É (–±–µ–∑ –∑–º—ñ–Ω) ---
  const handleInitialBalanceChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInitialBalanceInput(event.target.value);
  };

  const setCustomBalance = () => {
    if (isNaN(parsedInitialBalance) || parsedInitialBalance < 0) {
      alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–µ –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É.");
      return;
    }
    setBalance(prevBalance => prevBalance + parsedInitialBalance); 
    setInitialBalanceInput(''); 
  };
  // --- –ö—ñ–Ω–µ—Ü—å –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É ---

  // –ù–û–í–ò–ô –û–ë–†–û–ë–ù–ò–ö: –ó–º—ñ–Ω–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É
  const handleQuantityChange = (productId: string, change: number) => {
    setSelectedQuantities(prevQuantities => {
      const newQuantities = { ...prevQuantities }; // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –æ–±'—î–∫—Ç–∞ —Å—Ç–∞–Ω—É

      const currentQty = newQuantities[productId] || 0; // –ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–±–æ 0

      if (change > 0) { // –î–æ–¥–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        newQuantities[productId] = currentQty + change;
      } else if (change < 0) { // –í—ñ–¥–Ω—ñ–º–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        if (currentQty + change <= 0) { // –Ø–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞—î 0 –∞–±–æ –º–µ–Ω—à–µ, –≤–∏–¥–∞–ª—è—î–º–æ —Ç–æ–≤–∞—Ä –∑ –≤–∏–±–æ—Ä—É
          delete newQuantities[productId];
        } else { // –ó–º–µ–Ω—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
          newQuantities[productId] = currentQty + change;
        }
      }
      return newQuantities; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–æ–≤–∏–π –æ–±'—î–∫—Ç –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    });
  };

  // –û–ù–û–í–õ–ï–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö: handlePayment
  const handlePayment = () => {
    if (paymentAmount === 0) {
      alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.");
      return;
    }

    if (balance >= paymentAmount) {
      setBalance(prevBalance => prevBalance - paymentAmount);
      setPurchaseCount(prevCount => prevCount + 1);

      // –ì–æ—Ç—É—î–º–æ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–∫—É–ø–æ–∫ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
      const newPurchaseEntries: PurchaseItem[] = [];
      for (const productId in selectedQuantities) {
        const quantity = selectedQuantities[productId];
        const product = products.find(p => p.id === productId);
        if (product && quantity > 0) {
          newPurchaseEntries.push({
            id: `${product.id}-${Date.now()}-${Math.random()}`, // –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó –≤ —ñ—Å—Ç–æ—Ä—ñ—ó
            name: product.name,
            icon: product.icon,
            unitPrice: product.price, // –¶—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é
            quantity: quantity, // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∏–¥–±–∞–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
            totalItemPrice: product.price * quantity, // –ó–∞–≥–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –∑–∞ —Ü—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É
            timestamp: new Date().toLocaleString()
          });
        }
      }
      
      setPurchaseHistory(prevHistory => [...newPurchaseEntries, ...prevHistory]); // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –∑–∞–ø–∏—Å–∏
      setSelectedQuantities({}); // –û—á–∏—â—É—î–º–æ –≤–∏–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –ø—ñ—Å–ª—è –ø–æ–∫—É–ø–∫–∏
    } else {
      alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ —Ä–∞—Ö—É–Ω–∫—É! –ü–æ—Ç—Ä—ñ–±–Ω–æ ${paymentAmount} –≥—Ä–Ω, –∞ —É –≤–∞—Å ${balance} –≥—Ä–Ω.`);
    }
  };

  const isSetBalanceButtonDisabled: boolean = isNaN(parsedInitialBalance) || parsedInitialBalance < 0;

  // –õ–æ–≥—ñ–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ó–¥—ñ–π—Å–Ω–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É" (–±–µ–∑ –∑–º—ñ–Ω, paymentAmount –≤–∂–µ –≤—Ä–∞—Ö–æ–≤—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å)
  const isPurchaseButtonDisabled: boolean = paymentAmount === 0 || balance < paymentAmount || balance === 0;

  return (
    <>
      <h1>–ì–∞–º–∞–Ω–µ—Ü—å –≤–∏—Ç—Ä–∞—Ç</h1>

      <div>
        <label htmlFor="initialBalance">–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:</label>
        <input
          type="number"
          id="initialBalance"
          value={initialBalanceInput}
          onChange={handleInitialBalanceChange}
          min="0"
          step="any"
          placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥, 5000"
        />
        <button onClick={setCustomBalance} disabled={isSetBalanceButtonDisabled}>
          –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ –ë–∞–ª–∞–Ω—Å
        </button>
      </div>

      <hr />

      <h2>–í–∞—à –ë–∞–ª–∞–Ω—Å: {balance} –≥—Ä–Ω</h2>
      <h3>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑—Ä–æ–±–ª–µ–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫: {purchaseCount}</h3>
      <h3>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤–∏–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤: {paymentAmount} –≥—Ä–Ω</h3>

      <h3>–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä–∏ —Ç–∞ —ó—Ö –∫—ñ–ª—å–∫—ñ—Å—Ç—å:</h3>
      <div style={{ display: 'flex', gap: '20px', flexWrap: 'wrap', marginBottom: '20px' }}>
        {products.map(product => {
          const currentQuantity = selectedQuantities[product.id] || 0; // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É
          return (
            <div 
              key={product.id}
              // –ö–ª—ñ–∫ –Ω–∞ —Å–∞–º–æ–º—É –µ–ª–µ–º–µ–Ω—Ç—ñ –º–æ–∂–µ –∑–±—ñ–ª—å—à—É–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ 1, –∞–±–æ –∫–µ—Ä—É–≤–∞—Ç–∏—Å—è –ª–∏—à–µ –∫–Ω–æ–ø–∫–∞–º–∏
              // onClick={() => handleQuantityChange(product.id, 1)} // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
              style={{
                cursor: 'pointer',
                border: `2px solid ${currentQuantity > 0 ? 'blue' : '#ccc'}`, // –†–∞–º–∫–∞, —è–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å > 0
                borderRadius: '8px',
                padding: '10px 15px',
                textAlign: 'center',
                backgroundColor: currentQuantity > 0 ? '#e6f7ff' : '#f9f9f9',
                boxShadow: currentQuantity > 0 ? '0 0 8px rgba(0, 0, 255, 0.3)' : 'none',
                transition: 'all 0.2s ease-in-out',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'space-between'
              }}
            >
              <span style={{ fontSize: '2em' }}>{product.icon}</span>
              <p style={{ margin: '5px 0 0 0', fontWeight: 'bold' }}>{product.name}</p>
              <p style={{ margin: '0', color: '#555' }}>{product.price} –≥—Ä–Ω/—à—Ç.</p>
              
              {/* –ö–Ω–æ–ø–∫–∏ +1 / -1 —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ */}
              <div style={{ display: 'flex', alignItems: 'center', marginTop: '10px' }}>
                <button 
                  onClick={(e) => { e.stopPropagation(); handleQuantityChange(product.id, -1); }} // e.stopPropagation() —â–æ–± –∫–ª—ñ–∫ –Ω–∞ –∫–Ω–æ–ø—Ü—ñ –Ω–µ –≤–∏–∫–ª–∏–∫–∞–≤ –∫–ª—ñ–∫ –Ω–∞ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–º—É div
                  disabled={currentQuantity === 0} // –í–∏–º–∏–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É "-", —è–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å 0
                  style={{ fontSize: '1.2em', padding: '5px 10px', margin: '0 5px' }}
                >
                  -
                </button>
                <span style={{ fontSize: '1.2em', fontWeight: 'bold' }}>
                  {currentQuantity}
                </span>
                <button 
                  onClick={(e) => { e.stopPropagation(); handleQuantityChange(product.id, 1); }}
                  style={{ fontSize: '1.2em', padding: '5px 10px', margin: '0 5px' }}
                >
                  +
                </button>
              </div>
            </div>
          );
        })}
      </div>

      <button
        onClick={handlePayment}
        disabled={isPurchaseButtonDisabled}
      >
        –ó–¥—ñ–π—Å–Ω–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É
      </button>

      {balance === 0 && purchaseCount === 0 && parsedInitialBalance === 0 && paymentAmount === 0 ? (
        <p style={{ color: 'blue' }}>–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å, —â–æ–± –ø–æ—á–∞—Ç–∏ –ø–æ–∫—É–ø–∫–∏.</p>
      ) : balance === 0 && purchaseCount > 0 && paymentAmount === 0 ? (
        <p style={{ color: 'red' }}>–ù–∞ —Ä–∞—Ö—É–Ω–∫—É –Ω–µ–º–∞—î –∫–æ—à—Ç—ñ–≤! –ü–æ–∫—É–ø–∫–∏ –±—ñ–ª—å—à–µ –Ω–µ–º–æ–∂–ª–∏–≤—ñ.</p>
      ) : paymentAmount > balance && balance > 0 ? (
        <p style={{ color: 'orange' }}>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤–∏–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ ({paymentAmount} –≥—Ä–Ω) –ø–µ—Ä–µ–≤–∏—â—É—î –¥–æ—Å—Ç—É–ø–Ω–∏–π –±–∞–ª–∞–Ω—Å.</p>
      ) : paymentAmount === 0 && balance > 0 ? (
        <p>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.</p>
      ) : (
        <p>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ó–¥—ñ–π—Å–Ω–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É" –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.</p>
      )}

      {/* –°–µ–∫—Ü—ñ—è –Ü–°–¢–û–†–Ü–á –ü–û–ö–£–ü–û–ö */}
      {purchaseHistory.length > 0 && (
        <>
          <hr />
          <h2>–Ü—Å—Ç–æ—Ä—ñ—è –ü–æ–∫—É–ø–æ–∫</h2>
          <table style={{ width: '100%', borderCollapse: 'collapse', marginTop: '10px' }}>
            <thead>
              <tr style={{ background: '#f2f2f2' }}>
                <th style={{ padding: '8px', border: '1px solid #ddd', textAlign: 'left' }}>–ß–∞—Å</th>
                <th style={{ padding: '8px', border: '1px solid #ddd', textAlign: 'left' }}>–¢–æ–≤–∞—Ä</th>
                <th style={{ padding: '8px', border: '1px solid #ddd', textAlign: 'left' }}>–Ü–∫–æ–Ω–∫–∞</th>
                <th style={{ padding: '8px', border: '1px solid #ddd', textAlign: 'center' }}>–ö—ñ–ª—å–∫—ñ—Å—Ç—å</th> {/* –ù–æ–≤–∞ –∫–æ–ª–æ–Ω–∫–∞ */}
                <th style={{ padding: '8px', border: '1px solid #ddd', textAlign: 'right' }}>–¶—ñ–Ω–∞ –∑–∞ —à—Ç. (–≥—Ä–Ω)</th> {/* –ù–æ–≤–∞ –∫–æ–ª–æ–Ω–∫–∞ */}
                <th style={{ padding: '8px', border: '1px solid #ddd', textAlign: 'right' }}>–ó–∞–≥–∞–ª–æ–º (–≥—Ä–Ω)</th> {/* –ù–æ–≤–∞ –∫–æ–ª–æ–Ω–∫–∞ */}
              </tr>
            </thead>
            <tbody>
              {purchaseHistory.map((item, index) => (
                <tr key={item.id} style={{ background: index % 2 === 0 ? '#fff' : '#f9f9f9' }}>
                  <td style={{ padding: '8px', border: '1px solid #ddd' }}>{item.timestamp}</td>
                  <td style={{ padding: '8px', border: '1px solid #ddd' }}>{item.name}</td>
                  <td style={{ padding: '8px', border: '1px solid #ddd', fontSize: '1.2em' }}>{item.icon}</td>
                  <td style={{ padding: '8px', border: '1px solid #ddd', textAlign: 'center' }}>{item.quantity}</td>
                  <td style={{ padding: '8px', border: '1px solid #ddd', textAlign: 'right' }}>{item.unitPrice}</td>
                  <td style={{ padding: '8px', border: '1px solid #ddd', textAlign: 'right', fontWeight: 'bold' }}>{item.totalItemPrice}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </>
      )}
    </>
  );
}

export default Home;
